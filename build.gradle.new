plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'eclipse'
}

version = mod_version
group = mod_group_id

repositories {
    mavenCentral()
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
    maven {
        name = 'NeoForged Snapshots'  
        url = 'https://maven.neoforged.net/snapshots/'
    }
    mavenLocal()
}

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

// Configure source compatibility for Java
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

// Ensure Java compilation options are set
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'
}

neoForge {
    version = neo_version
    
    parchment {
        minecraftVersion = minecraft_version
        version = parchment_mappings_version
    }

    // Run configurations
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { 
    srcDir 'src/generated/resources'
    srcDir 'src/main/resources'
}

sourceSets.test.resources {
    srcDir 'src/test/resources'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Add development-time resources
processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "neo_version", neo_version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version,
               'minecraft_version': minecraft_version,
               'neo_version': neo_version
    }
}

dependencies {
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // Annotation processor for Mixins if needed
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: project.findProperty('curseforge_api_key') ?: ''
    project {
        id = project.curseforge_project_id
        releaseType = 'release'
        addGameVersion '1.21.1'
        addGameVersion 'Java 21'
        addGameVersion 'NeoForge'
        mainArtifact(jar) {
            displayName = "Random Respawn On Death v${version}"
            changelog = file('CHANGELOG.md').text
        }
    }
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN') ?: project.findProperty('modrinth_token') ?: ''
    projectId = project.modrinth_project_id
    versionNumber = project.version
    versionName = "Random Respawn On Death v${version}"
    versionType = 'release'
    uploadFile = jar
    gameVersions = ['1.21.1']
    loaders = ['neoforge']
    changelog = file('CHANGELOG.md').text
    dependencies {
        required.project 'neoforge'
    }
}
