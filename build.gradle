plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'eclipse'
}

version = mod_version
group = mod_group_id

repositories {
    mavenCentral()
    // Required for some Minecraft artifacts
    maven {
        name = 'Minecraft Libraries'
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
    maven {
        name = 'NeoForged Snapshots'  
        url = 'https://maven.neoforged.net/snapshots/'
    }
    mavenLocal()
}

// Create a dedicated runtime jar for the mod and ensure it's produced by assemble.
// This packages compiled classes and processed resources into a standard jar in build/libs.
tasks.register('runtimeJar', Jar) {
    dependsOn classes
    dependsOn processResources
    from sourceSets.main.output
    // Use the project properties for a canonical artifact name
    archiveBaseName = project.hasProperty('mod_id') ? project.mod_id : 'mod'
    archiveVersion = project.hasProperty('mod_version') ? project.mod_version : project.version
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Ensure assemble builds the runtime jar
tasks.named('assemble') {
    dependsOn tasks.named('runtimeJar')
}

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

// Ensure dependency variant selection prefers Java 17 artifacts
import org.gradle.api.attributes.Attribute

configurations.all {
    // Ensure Gradle requests artifacts compatible with JVM runtime 21 so
    // published NeoForge/neoform variants compiled for Java 21 are selected.
    // This aligns variant selection with the toolchain configured above.
    attributes.attribute(org.gradle.api.attributes.Attribute.of('org.gradle.jvm.version', Integer), 21)

    // Force older, Java-17-compatible NeoForge / neoform artifacts as a safe
    // fallback. Adjust versions if you find a different candidate in the
    // NeoForged index that better fits your environment.
    resolutionStrategy {
        // Pin the neoforge platform to the version declared in gradle.properties if set,
        // otherwise fall back to 21.1.150 which is known to be older than the 21.1.206
        // artifacts that require Java 21.
        if (project.hasProperty('neo_version')) {
            force "net.neoforged:neoforge:${project.neo_version}"
        } else {
            force 'net.neoforged:neoforge:21.1.150'
        }

        // Additionally force an older neoform runtime that historically targeted Java 17.
        force 'net.neoforged:neoform:1.21-20240613.152323'
    }
}

// Configure source compatibility for Java
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

// Ensure Java compilation options are set
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'
}

// Set duplicates strategy for all copy tasks
tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Set duplicates strategy for all Jar tasks  
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

neoForge {
    version = neo_version

    // Run configurations
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { 
    srcDir 'src/generated/resources'
    srcDir 'src/main/resources'
}

sourceSets.test.resources {
    srcDir 'src/test/resources'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Add development-time resources
// Precompute replacement properties to avoid referencing Gradle script objects from inside closures
def replaceProperties = [
    'version'                 : project.version,
    'minecraft_version'       : project.findProperty('minecraft_version'),
    'minecraft_version_range' : project.findProperty('minecraft_version_range'),
    'neo_version'             : project.findProperty('neo_version'),
    'neo_version_range'       : project.findProperty('neo_version_range'),
    'loader_version_range'    : project.findProperty('loader_version_range'),
    'mod_id'                  : project.findProperty('mod_id'),
    'mod_name'                : project.findProperty('mod_name'),
    'mod_license'             : project.findProperty('mod_license'),
    'mod_version'             : project.findProperty('mod_version'),
    'mod_authors'             : project.findProperty('mod_authors'),
    'mod_description'         : project.findProperty('mod_description')
]

processResources {
    // Register inputs using the precomputed map so closures don't capture Gradle script objects
    replaceProperties.each { k, v -> inputs.property(k, v) }

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties
    }
}

dependencies {
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // Annotation processor for Mixins if needed
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block generates mod metadata using the precomputed replaceProperties map
// so we don't redeclare variables or capture Gradle script objects inside closures.
def generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    // Declare the task inputs explicitly using the precomputed map
    inputs.properties(replaceProperties)

    // Copy and expand the templates into the generated sources directory
    from("src/main/templates")
    into(layout.buildDirectory.dir("generated/sources/modMetadata"))
    expand(replaceProperties)
}

// Include the output of "generateModMetadata" as an input directory for the build
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: project.findProperty('curseforge_api_key') ?: ''
    project {
        id = project.curseforge_project_id
        releaseType = 'release'
    addGameVersion '1.21.1'
    addGameVersion 'Java 17'
        addGameVersion 'NeoForge'
        mainArtifact(jar) {
            displayName = "Random Respawn On Death v${version}"
            changelog = file('CHANGELOG.md').text
        }
    }
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN') ?: project.findProperty('modrinth_token') ?: ''
    projectId = project.modrinth_project_id
    versionNumber = project.version
    versionName = "Random Respawn On Death v${version}"
    versionType = 'release'
    uploadFile = jar
    gameVersions = ['1.21.1']
    loaders = ['neoforge']
    changelog = file('CHANGELOG.md').text
    dependencies {
        required.project 'neoforge'
    }
}
